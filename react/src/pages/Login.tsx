/* eslint-disable @typescript-eslint/no-unused-vars */
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { LoginFormUser } from "../types";
import { useDispatch } from "react-redux";
import { useMutation } from "@tanstack/react-query";
import { loginUser } from "../services/userServices";
import { addLoggedUser } from "../redux/slice";
import { showErrorToast, showSuccessToast } from "../components/Toast";

function Login() {
    const navigate = useNavigate();
    const dispatch = useDispatch();
    // const queryClient = useQueryClient();

    // const [emailError, showEmailError] = useState(false);
    // const [passError, showPassError] = useState(false);
    const [emptyFieldsErr, setEmptyFieldsErr] = useState(false);

    const [loginUserObj, setLoginUserObj] = useState<LoginFormUser>({
        email: "",
        password: "",
    });

    // Get logged user from Redux
    // const loggedUser = useSelector(
    //     (state: RootState) => state.auth.loggedInUser
    // );
    // console.log("Logged user", loggedUser);

    // HTTP POST, BE vraca Usera
    const loginUserMutation = useMutation({
        mutationFn: loginUser,
        onSuccess: (data) => {
            if (data && data.status) {
                // Dispatch u Redux
                dispatch(
                    addLoggedUser({
                        ...data.data,
                        auth_token: data.auth_token, // auth_token iz response
                    })
                );

                // Navigacija na home
                showSuccessToast("Login is successfull!");
                navigate("/");
            }
        },
        onError: () => {
            showErrorToast("Login failed!");
        },
    });

    // Login
    function handleUserLogin(e: React.FormEvent) {
        e.preventDefault();

        // Comparing login credentials with registered users
        // const user = users.find(
        //     (user: User) =>
        //         user.email === loginUserObj.email &&
        //         user.password === loginUserObj.password
        // );

        // if (!user) {
        //     alert("Wrong credentials!");
        //     return;
        // }

        if (loginUserObj.email === "" || loginUserObj.password === "") {
            return setEmptyFieldsErr(true);
        }
        // User for sending
        const loggedUser: LoginFormUser = {
            email: loginUserObj.email,
            password: loginUserObj.password,
        };

        loginUserMutation.mutate(loggedUser);
    }

    // Error handling
    // if (usersIsLoading) return <p>Loading...</p>;
    // if (usersError) return <p>{usersError?.message}</p>;
    // if (!users) return <p>No data found.</p>;
    return (
        <div className="auth-wrapper">
            <div className="form-wrapper">
                <div className="auth-logo">
                    {" "}
                    <svg
                        width="500"
                        height="50"
                        viewBox="0 0 599 145"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <rect
                            y="4"
                            width="100"
                            height="100"
                            rx="24"
                            fill="#204399"
                        />
                        <path
                            d="M157.608 116V28.7273H173.418V102.747H211.855V116H157.608ZM250.272 117.278C243.71 117.278 238.042 115.915 233.269 113.188C228.525 110.432 224.874 106.54 222.318 101.511C219.761 96.4545 218.482 90.5028 218.482 83.6562C218.482 76.9233 219.761 71.0142 222.318 65.929C224.903 60.8153 228.511 56.8381 233.141 53.9972C237.772 51.1278 243.213 49.6932 249.463 49.6932C253.497 49.6932 257.303 50.3466 260.883 51.6534C264.491 52.9318 267.673 54.9205 270.428 57.6193C273.213 60.3182 275.4 63.7557 276.991 67.9318C278.582 72.0795 279.377 77.0227 279.377 82.7614V87.4915H225.727V77.0938H264.59C264.562 74.1392 263.923 71.5114 262.673 69.2102C261.423 66.8807 259.676 65.0483 257.431 63.7131C255.215 62.3778 252.63 61.7102 249.676 61.7102C246.522 61.7102 243.752 62.4773 241.366 64.0114C238.98 65.517 237.119 67.5057 235.784 69.9773C234.477 72.4205 233.809 75.1051 233.781 78.0312V87.108C233.781 90.9148 234.477 94.1818 235.869 96.9091C237.261 99.608 239.207 101.682 241.707 103.131C244.207 104.551 247.133 105.261 250.485 105.261C252.73 105.261 254.761 104.949 256.579 104.324C258.397 103.67 259.974 102.719 261.309 101.469C262.644 100.219 263.653 98.6705 264.335 96.8239L278.738 98.4432C277.829 102.25 276.096 105.574 273.539 108.415C271.011 111.227 267.772 113.415 263.823 114.977C259.874 116.511 255.357 117.278 250.272 117.278ZM307.663 117.321C303.515 117.321 299.779 116.582 296.456 115.105C293.16 113.599 290.546 111.384 288.615 108.457C286.711 105.531 285.76 101.923 285.76 97.6335C285.76 93.9403 286.441 90.8864 287.805 88.4716C289.169 86.0568 291.029 84.125 293.387 82.6761C295.745 81.2273 298.402 80.1335 301.356 79.3949C304.339 78.6278 307.421 78.0739 310.603 77.733C314.438 77.3352 317.549 76.9801 319.936 76.6676C322.322 76.3267 324.055 75.8153 325.135 75.1335C326.242 74.4233 326.796 73.3295 326.796 71.8523V71.5966C326.796 68.3864 325.845 65.9006 323.941 64.1392C322.038 62.3778 319.296 61.4972 315.717 61.4972C311.938 61.4972 308.941 62.321 306.725 63.9688C304.538 65.6165 303.061 67.5625 302.294 69.8068L287.89 67.7614C289.027 63.7841 290.902 60.4602 293.515 57.7898C296.129 55.0909 299.325 53.0739 303.103 51.7386C306.882 50.375 311.058 49.6932 315.632 49.6932C318.785 49.6932 321.924 50.0625 325.049 50.8011C328.174 51.5398 331.029 52.7614 333.615 54.4659C336.2 56.142 338.274 58.429 339.836 61.3267C341.427 64.2244 342.223 67.8466 342.223 72.1932V116H327.393V107.009H326.882C325.944 108.827 324.623 110.531 322.919 112.122C321.242 113.685 319.126 114.949 316.569 115.915C314.041 116.852 311.072 117.321 307.663 117.321ZM311.669 105.986C314.765 105.986 317.45 105.375 319.723 104.153C321.995 102.903 323.742 101.256 324.964 99.2102C326.214 97.1648 326.839 94.9347 326.839 92.5199V84.8068C326.356 85.2045 325.532 85.5739 324.367 85.9148C323.231 86.2557 321.953 86.554 320.532 86.8097C319.112 87.0653 317.706 87.2926 316.313 87.4915C314.921 87.6903 313.714 87.8608 312.691 88.0028C310.39 88.3153 308.331 88.8267 306.512 89.5369C304.694 90.2472 303.26 91.2415 302.208 92.5199C301.157 93.7699 300.632 95.3892 300.632 97.3778C300.632 100.219 301.669 102.364 303.742 103.812C305.816 105.261 308.458 105.986 311.669 105.986ZM354.134 116V50.5455H369.091V61.4545H369.773C370.966 57.6761 373.012 54.7642 375.91 52.7188C378.836 50.6449 382.174 49.608 385.924 49.608C386.776 49.608 387.728 49.6506 388.779 49.7358C389.858 49.7926 390.753 49.892 391.463 50.0341V64.2244C390.81 63.9972 389.773 63.7983 388.353 63.6278C386.961 63.429 385.611 63.3295 384.304 63.3295C381.492 63.3295 378.963 63.9403 376.719 65.1619C374.503 66.3551 372.756 68.017 371.478 70.1477C370.199 72.2784 369.56 74.7358 369.56 77.5199V116H354.134ZM413.538 77.6477V116H398.112V50.5455H412.856V61.6676H413.623C415.129 58.0028 417.53 55.0909 420.825 52.9318C424.149 50.7727 428.254 49.6932 433.14 49.6932C437.658 49.6932 441.592 50.6591 444.944 52.5909C448.325 54.5227 450.939 57.321 452.785 60.9858C454.66 64.6506 455.584 69.0966 455.555 74.3239V116H440.129V76.7102C440.129 72.3352 438.993 68.9119 436.72 66.4403C434.476 63.9687 431.365 62.733 427.388 62.733C424.689 62.733 422.288 63.3295 420.186 64.5227C418.112 65.6875 416.479 67.3778 415.285 69.5938C414.121 71.8097 413.538 74.4943 413.538 77.6477ZM467.637 116V50.5455H483.063V116H467.637ZM475.393 41.2557C472.95 41.2557 470.847 40.446 469.086 38.8267C467.325 37.179 466.444 35.2045 466.444 32.9034C466.444 30.5739 467.325 28.5994 469.086 26.9801C470.847 25.3324 472.95 24.5085 475.393 24.5085C477.864 24.5085 479.967 25.3324 481.7 26.9801C483.461 28.5994 484.342 30.5739 484.342 32.9034C484.342 35.2045 483.461 37.179 481.7 38.8267C479.967 40.446 477.864 41.2557 475.393 41.2557ZM528.48 50.5455V62.4773H489.786V50.5455H528.48ZM499.46 116V44.3665C499.46 39.9631 500.369 36.2983 502.187 33.3722C504.034 30.446 506.505 28.2585 509.602 26.8097C512.698 25.3608 516.136 24.6364 519.914 24.6364C522.585 24.6364 524.957 24.8494 527.031 25.2756C529.105 25.7017 530.639 26.0852 531.633 26.4261L528.565 38.358C527.911 38.1591 527.087 37.9602 526.093 37.7614C525.099 37.5341 523.991 37.4205 522.769 37.4205C519.9 37.4205 517.869 38.1165 516.676 39.5085C515.511 40.8722 514.928 42.8324 514.928 45.3892V116H499.46ZM546.549 140.545C544.446 140.545 542.5 140.375 540.71 140.034C538.949 139.722 537.543 139.352 536.492 138.926L540.071 126.909C542.316 127.563 544.318 127.875 546.08 127.847C547.841 127.818 549.389 127.264 550.725 126.185C552.088 125.134 553.239 123.372 554.176 120.901L555.497 117.364L531.762 50.5455H548.125L563.211 99.9773H563.892L579.02 50.5455H595.426L569.219 123.926C567.997 127.392 566.378 130.361 564.361 132.832C562.344 135.332 559.872 137.236 556.946 138.543C554.049 139.878 550.583 140.545 546.549 140.545Z"
                            fill="#204399"
                        />
                        <path
                            d="M69.5 58.25C72.5357 46.243 84.0012 40.1122 108.964 40C109.363 39.9985 109.759 40.0762 110.128 40.2285C110.497 40.3808 110.832 40.6048 111.114 40.8875C111.396 41.1703 111.62 41.5062 111.772 41.8759C111.924 42.2456 112.001 42.6418 112 43.0417V97.7917C112 98.5984 111.68 99.372 111.111 99.9425C110.542 100.513 109.769 100.833 108.964 100.833C84.6786 100.833 75.2963 105.74 69.5 113M69.5 58.25C66.4643 46.243 54.9988 40.1122 30.0357 40C29.6367 39.9985 29.2412 40.0762 28.8722 40.2285C28.5032 40.3808 28.168 40.6048 27.8858 40.8875C27.6036 41.1703 27.3801 41.5062 27.228 41.8759C27.076 42.2456 26.9985 42.6418 27 43.0417V97.4248C27 99.303 28.1612 100.833 30.0357 100.833C54.3214 100.833 63.7378 105.776 69.5 113M69.5 58.25V113"
                            stroke="white"
                            strokeWidth="5"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                        />
                    </svg>
                </div>
                <div className="auth-heading">Login</div>

                <form>
                    <div className="input-wrapper">
                        <label>Email</label>
                        <input
                            onChange={(e) =>
                                setLoginUserObj({
                                    ...loginUserObj,
                                    email: e.target.value,
                                })
                            }
                            value={loginUserObj.email}
                            type="email"
                        />
                    </div>
                    <div className="input-wrapper">
                        <label>Password</label>
                        <input
                            onChange={(e) =>
                                setLoginUserObj({
                                    ...loginUserObj,
                                    password: e.target.value,
                                })
                            }
                            value={loginUserObj.password}
                            type="password"
                        />
                    </div>
                    {emptyFieldsErr ? (
                        <p className="error-msg">Emtpy fields!</p>
                    ) : (
                        ""
                    )}

                    <div className="button-wrapper">
                        <button
                            onClick={handleUserLogin}
                            className="btn btn-primary"
                            type="submit"
                        >
                            <span>Login</span>
                        </button>
                    </div>
                </form>

                <p className="login-text">
                    Forgot password? Click{" "}
                    <span onClick={() => navigate("/forgot-password")}>
                        here!
                    </span>{" "}
                </p>

                <p className="login-text">
                    Don't have an account? Register{" "}
                    <span onClick={() => navigate("/register")}>here!</span>{" "}
                </p>
                <p className="login-text">
                    You can <span onClick={() => navigate("/")}>browse</span>{" "}
                    without account, but you cant see all pages!
                </p>
            </div>
        </div>
    );
}

export default Login;
